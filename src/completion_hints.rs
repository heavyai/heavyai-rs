// Autogenerated by Thrift Compiler (0.15.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct TCompletionHintType(pub i32);

impl TCompletionHintType {
  pub const COLUMN: TCompletionHintType = TCompletionHintType(0);
  pub const TABLE: TCompletionHintType = TCompletionHintType(1);
  pub const VIEW: TCompletionHintType = TCompletionHintType(2);
  pub const SCHEMA: TCompletionHintType = TCompletionHintType(3);
  pub const CATALOG: TCompletionHintType = TCompletionHintType(4);
  pub const REPOSITORY: TCompletionHintType = TCompletionHintType(5);
  pub const FUNCTION: TCompletionHintType = TCompletionHintType(6);
  pub const KEYWORD: TCompletionHintType = TCompletionHintType(7);
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::COLUMN,
    Self::TABLE,
    Self::VIEW,
    Self::SCHEMA,
    Self::CATALOG,
    Self::REPOSITORY,
    Self::FUNCTION,
    Self::KEYWORD,
  ];
  #[allow(clippy::trivially_copy_pass_by_ref)]
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    o_prot.write_i32(self.0)
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TCompletionHintType> {
    let enum_value = i_prot.read_i32()?;
    Ok(TCompletionHintType::from(enum_value))
  }
}

impl From<i32> for TCompletionHintType {
  fn from(i: i32) -> Self {
    match i {
      0 => TCompletionHintType::COLUMN,
      1 => TCompletionHintType::TABLE,
      2 => TCompletionHintType::VIEW,
      3 => TCompletionHintType::SCHEMA,
      4 => TCompletionHintType::CATALOG,
      5 => TCompletionHintType::REPOSITORY,
      6 => TCompletionHintType::FUNCTION,
      7 => TCompletionHintType::KEYWORD,
      _ => TCompletionHintType(i)
    }
  }
}

impl From<&i32> for TCompletionHintType {
  fn from(i: &i32) -> Self {
    TCompletionHintType::from(*i)
  }
}

impl From<TCompletionHintType> for i32 {
  fn from(e: TCompletionHintType) -> i32 {
    e.0
  }
}

impl From<&TCompletionHintType> for i32 {
  fn from(e: &TCompletionHintType) -> i32 {
    e.0
  }
}

//
// TCompletionHint
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct TCompletionHint {
  pub type_: Option<TCompletionHintType>,
  pub hints: Option<Vec<String>>,
  pub replaced: Option<String>,
}

impl TCompletionHint {
  pub fn new<F1, F2, F3>(type_: F1, hints: F2, replaced: F3) -> TCompletionHint where F1: Into<Option<TCompletionHintType>>, F2: Into<Option<Vec<String>>>, F3: Into<Option<String>> {
    TCompletionHint {
      type_: type_.into(),
      hints: hints.into(),
      replaced: replaced.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TCompletionHint> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<TCompletionHintType> = None;
    let mut f_2: Option<Vec<String>> = Some(Vec::new());
    let mut f_3: Option<String> = Some("".to_owned());
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = TCompletionHintType::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let list_ident = i_prot.read_list_begin()?;
          let mut val: Vec<String> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_0 = i_prot.read_string()?;
            val.push(list_elem_0);
          }
          i_prot.read_list_end()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = TCompletionHint {
      type_: f_1,
      hints: f_2,
      replaced: f_3,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("TCompletionHint");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.type_ {
      o_prot.write_field_begin(&TFieldIdentifier::new("type", TType::I32, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.hints {
      o_prot.write_field_begin(&TFieldIdentifier::new("hints", TType::List, 2))?;
      o_prot.write_list_begin(&TListIdentifier::new(TType::String, fld_var.len() as i32))?;
      for e in fld_var {
        o_prot.write_string(e)?;
      }
      o_prot.write_list_end()?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.replaced {
      o_prot.write_field_begin(&TFieldIdentifier::new("replaced", TType::String, 3))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for TCompletionHint {
  fn default() -> Self {
    TCompletionHint{
      type_: None,
      hints: Some(Vec::new()),
      replaced: Some("".to_owned()),
    }
  }
}
